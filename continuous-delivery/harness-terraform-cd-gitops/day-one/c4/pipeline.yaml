pipeline:
  name: ${pipeline_name}
  identifier: ${pipeline_identifier}
  projectIdentifier: ${project_identifier}
  orgIdentifier: ${org_identifier}
  tags: {}
  stages:
    - stage:
        name: mybuild
        identifier: mybuild
        description: ""
        type: CI
        spec:
          cloneCodebase: true
          platform:
            os: Linux
            arch: Amd64
          runtime:
            type: Cloud
            spec: {}
          execution:
            steps:
              - step:
                  type: Run
                  name: buildtest
                  identifier: buildtest
                  spec:
                    shell: Sh
                    command: mvn package
                    envVariables:
                      JAVA_HOME: /usr/lib/jvm/temurin-17-jdk-amd64
              - step:
                  type: BuildAndPushDockerRegistry
                  name: containerize
                  identifier: containerize
                  spec:
                    connectorRef: mycontainerregistryconnector
                    repo: harbor.<+variable.mydomain>/library/${container_image}
                    tags:
                      - <+pipeline.sequenceId>
    - stage:
        name: mydevdeploy
        identifier: mydevdeploy
        description: ""
        type: Deployment
        spec:
          deploymentType: Kubernetes
          gitOpsEnabled: true
          service:
            serviceRef: ${service_identifier}
            serviceInputs:
              serviceDefinition:
                type: Kubernetes
                spec:
                  manifests:
                    - manifest:
                        identifier: ${service_identifier}releasemanifest
                        type: ReleaseRepo
                        spec:
                          store:
                            type: HarnessCode
                            spec:
                              paths: <+input>
          execution:
            steps:
              - step:
                  type: GitOpsUpdateReleaseRepo
                  name: Update Release Repo
                  identifier: updateReleaseRepo
                  timeout: 10m
                  spec:
                    variables:
                      - name: image
                        type: String
                        value: /library/${container_image}:<+pipeline.sequenceId>
                      - name: mydomain
                        type: String
                        value: <+variable.mydomain>
                    prTitle: update tag
              - step:
                  type: MergePR
                  name: Merge PR
                  identifier: mergePR
                  spec:
                    deleteSourceBranch: true
                  timeout: 10m
            rollbackSteps: []
          environment:
            environmentRef: ${environment_identifier}
            deployToAll: false
            gitOpsClusters:
              - identifier: ${cluster_name}
                agentIdentifier: ${agent_name}
        tags: {}
        failureStrategies:
          - onFailure:
              errors:
                - AllErrors
              action:
                type: StageRollback
  properties:
    ci:
      codebase:
        repoName: ${codebase_name}
        build: <+input>
